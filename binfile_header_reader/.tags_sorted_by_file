!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
BL_eReprogram	main.c	/^teStatus BL_eReprogram(tsFW_Info *psFWImage)$/;"	f
firmware_fd	main.c	/^static int firmware_fd = 0;$/;"	v	file:
iFW_GetInfo	main.c	/^teFWStatus iFW_GetInfo(uint8_t *pu8Firmware, tsFW_Info *psFW_Info)$/;"	f
iFW_Open	main.c	/^teFWStatus iFW_Open(tsFW_Info *psFW_Info, char *pcFirmwareFile)$/;"	f
main	main.c	/^int main(int argc, char const *argv[])$/;"	f
pu8Firmware	main.c	/^static uint8_t* pu8Firmware = NULL;$/;"	v	file:
E_FW_ERROR	main.h	/^    E_FW_ERROR,$/;"	e	enum:__anon5
E_FW_INVALID_FILE	main.h	/^    E_FW_INVALID_FILE,$/;"	e	enum:__anon5
E_FW_OK	main.h	/^    E_FW_OK,$/;"	e	enum:__anon5
E_STATUS_BAD_PARAMETER	main.h	/^    E_STATUS_BAD_PARAMETER,$/;"	e	enum:__anon4
E_STATUS_ERROR	main.h	/^    E_STATUS_ERROR,$/;"	e	enum:__anon4
E_STATUS_ERROR_READING	main.h	/^    E_STATUS_ERROR_READING,$/;"	e	enum:__anon4
E_STATUS_ERROR_WRITING	main.h	/^    E_STATUS_ERROR_WRITING,$/;"	e	enum:__anon4
E_STATUS_FAILED_TO_OPEN_FILE	main.h	/^    E_STATUS_FAILED_TO_OPEN_FILE,$/;"	e	enum:__anon4
E_STATUS_INCOMPATIBLE	main.h	/^    E_STATUS_INCOMPATIBLE,$/;"	e	enum:__anon4
E_STATUS_NULL_PARAMETER	main.h	/^    E_STATUS_NULL_PARAMETER,$/;"	e	enum:__anon4
E_STATUS_OK	main.h	/^    E_STATUS_OK,$/;"	e	enum:__anon4
O_BINARY	main.h	14;"	d
O_RDONLY	main.h	11;"	d
O_RDWR	main.h	13;"	d
O_WRONLY	main.h	12;"	d
au32BootImageRecord	main.h	/^    uint32_t    au32BootImageRecord[4];$/;"	m	struct:__anon3
au32EncryptionInitialisationVector	main.h	/^    uint32_t    au32EncryptionInitialisationVector[4];$/;"	m	struct:__anon3
au8OadData	main.h	/^    uint8_t     au8OadData[12];$/;"	m	struct:__anon2
int16_t	main.h	/^typedef short int       int16_t;$/;"	t
int32_t	main.h	/^typedef int         int32_t;$/;"	t
int64_t	main.h	/^typedef long long int       int64_t;$/;"	t
int8_t	main.h	/^typedef signed char     int8_t;$/;"	t
pu8ImageData	main.h	/^    uint8_t*    pu8ImageData;                   \/**< Pointer to loaded image data for Flash *\/$/;"	m	struct:__anon1
pu8TextData	main.h	/^    uint8_t*    pu8TextData;                    \/**< Pointer to loaded .text section for RAM *\/$/;"	m	struct:__anon1
teFWStatus	main.h	/^} teFWStatus;$/;"	t	typeref:enum:__anon5
teStatus	main.h	/^} teStatus;$/;"	t	typeref:enum:__anon4
tsBL_BinHeaderV1	main.h	/^} __attribute__ ((packed)) tsBL_BinHeaderV1;$/;"	t	typeref:struct:__anon2
tsBL_BinHeaderV2	main.h	/^} __attribute__ ((packed)) tsBL_BinHeaderV2;$/;"	t	typeref:struct:__anon3
tsFW_Info	main.h	/^} tsFW_Info;$/;"	t	typeref:struct:__anon1
u16SpiScrambleIndex	main.h	/^    uint16_t    u16SpiScrambleIndex;$/;"	m	struct:__anon2
u32BssLength	main.h	/^    uint32_t    u32BssLength;$/;"	m	struct:__anon2
u32BssSectionInfo	main.h	/^    uint32_t    u32BssSectionInfo;$/;"	m	struct:__anon3
u32BssSectionLength	main.h	/^    uint32_t    u32BssSectionLength;            \/**< Length (bytes) of .bss section *\/$/;"	m	struct:__anon1
u32BssSectionLoadAddress	main.h	/^    uint32_t    u32BssSectionLoadAddress;       \/**< Address of start of .bss section *\/$/;"	m	struct:__anon1
u32BssStartAddress	main.h	/^    uint32_t    u32BssStartAddress;$/;"	m	struct:__anon2
u32DataSectionInfo	main.h	/^    uint32_t    u32DataSectionInfo;$/;"	m	struct:__anon3
u32ImageLength	main.h	/^    uint32_t    u32ImageLength;                 \/**< Length (bytes) of image for Flash *\/$/;"	m	struct:__anon1
u32MacAddressLocation	main.h	/^    uint32_t    u32MacAddressLocation;          \/**< Offset in file of MAC address *\/$/;"	m	struct:__anon1
u32ROMVersion	main.h	/^    uint32_t    u32ROMVersion;                  \/**< ROM Version that the FW was built for *\/$/;"	m	struct:__anon1
u32ROMVersion	main.h	/^    uint32_t    u32ROMVersion;$/;"	m	struct:__anon2
u32ROMVersion	main.h	/^    uint32_t    u32ROMVersion;$/;"	m	struct:__anon3
u32ResetEntryPoint	main.h	/^    uint32_t    u32ResetEntryPoint;             \/**< Address of rest (cold start) entry point *\/$/;"	m	struct:__anon1
u32ResetEntryPoint	main.h	/^    uint32_t    u32ResetEntryPoint;$/;"	m	struct:__anon2
u32ResetEntryPoint	main.h	/^    uint32_t    u32ResetEntryPoint;$/;"	m	struct:__anon3
u32TextLength	main.h	/^    uint32_t    u32TextLength;$/;"	m	struct:__anon2
u32TextSectionLength	main.h	/^    uint32_t    u32TextSectionLength;           \/**< Length (bytes) of .text section *\/$/;"	m	struct:__anon1
u32TextSectionLoadAddress	main.h	/^    uint32_t    u32TextSectionLoadAddress;      \/**< Address to load .text section *\/$/;"	m	struct:__anon1
u32TextStartAddress	main.h	/^    uint32_t    u32TextStartAddress;$/;"	m	struct:__anon2
u32Unused1	main.h	/^    uint32_t    u32Unused1;$/;"	m	struct:__anon2
u32WakeUpEntryPoint	main.h	/^    uint32_t    u32WakeUpEntryPoint;            \/**< Address of wake up (warm start) entry point *\/$/;"	m	struct:__anon1
u32WakeUpEntryPoint	main.h	/^    uint32_t    u32WakeUpEntryPoint;$/;"	m	struct:__anon2
u32WakeUpEntryPoint	main.h	/^    uint32_t    u32WakeUpEntryPoint;$/;"	m	struct:__anon3
u64MacAddress	main.h	/^    uint64_t    u64MacAddress;$/;"	m	struct:__anon3
u8ConfigByte0	main.h	/^    uint8_t     u8ConfigByte0;$/;"	m	struct:__anon2
u8ConfigByte1	main.h	/^    uint8_t     u8ConfigByte1;$/;"	m	struct:__anon2
u8TextDataStart	main.h	/^    uint8_t     u8TextDataStart;$/;"	m	struct:__anon2
u8TextDataStart	main.h	/^    uint8_t     u8TextDataStart;$/;"	m	struct:__anon3
uint16_t	main.h	/^typedef unsigned short int  uint16_t;$/;"	t
uint32_t	main.h	/^typedef unsigned int        uint32_t;$/;"	t
uint64_t	main.h	/^typedef unsigned long long int  uint64_t; $/;"	t
uint8_t	main.h	/^typedef unsigned char       uint8_t;$/;"	t
